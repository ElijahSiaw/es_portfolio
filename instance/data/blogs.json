[{
"id": 1,
"title":"Introduction to flask application",
"tag":"flask",
"slug":"cggfg",
"image":"flask.svg",
"video":"",
"thumbnail":"",
"summary":" <section><article><p><strong>Flask</strong> is a lightweight Python web framework designed to be simple and easy to use. It is often referred to as a &ldquo;microframework&rdquo; because it doesn&rsquo;t include a lot of built-in tools or libraries. Instead, Flask provides the core functionality needed to build web applications and lets you choose the extensions and libraries you want to add for features like database interaction, user authentication, or form validation.</p><p>This design philosophy makes Flask highly flexible and ideal for building small to medium-sized applications, prototypes, and microservices.</p>",
"post": "<section><article><p><strong>Flask</strong> is a lightweight Python web framework designed to be simple and easy to use. It is often referred to as a &ldquo;microframework&rdquo; because it doesn&rsquo;t include a lot of built-in tools or libraries. Instead, Flask provides the core functionality needed to build web applications and lets you choose the extensions and libraries you want to add for features like database interaction, user authentication, or form validation.</p><p>This design philosophy makes Flask highly flexible and ideal for building small to medium-sized applications, prototypes, and microservices.</p><h2 class='text-xl font-semibold' id='installation-on-all-operating-systems'>Installation on All Operating Systems</h2><p>The process for installing Flask is very similar across all major operating systems (Windows, macOS, and Linux) because it primarily relies on Python&rsquo;s package manager, pip, and a virtual environment. Using a virtual environment is a best practice that isolates your project&rsquo;s dependencies from your system-wide Python installation, preventing conflicts between different projects.</p><h3 id='heres-the-step-by-step-process'>Here&rsquo;s the step-by-step process:</h3><p><ol><li><strong>Install Python</strong></li></ol></p><p><ul><li>Before you can install Flask, you need to have Python installed on your system. You can download the latest version from the official Python website. Most Linux distributions and macOS come with Python pre-installed, but it&rsquo;s a good idea to ensure you have a recent version (3.x) and that pip is available.</li></ul></p><p><ol start='2'><li><strong>Create a Project Directory</strong></li></ol><ul><li>First, create a new folder for your project and navigate into it using your terminal or command prompt.</li></ul></p><figure data-rehype-pretty-code-figure='sh'><figcaption data-rehype-pretty-code-title='sh' data-language='sh'>sh</figcaption><pre class='language-sh'><code class='language-sh' data-line>mkdir my-flask-app\n\ncd my-flask-app</code></pre></figure><p><ol start='3'><li><strong>Create a Virtual Environment</strong></li></ol></p><p>This is the most important step for a clean and manageable project. You can use Python&rsquo;s built-in venv module.</p><p>Windows:<code class='language-'>python -m venv venv</code></p><p>macOS / Linux:<code class='language-'>python3 -m venv venv</code></p><p><ol start='4'><li><strong>Activate the Virtual Environment</strong></li></ol></p><p><ul><li>Once created, you must activate the virtual environment. Your command prompt or terminal will usually show the name of the activated environment to indicate that you&rsquo;re working within it.</li></ul></p><p>Windows:<code class='language-'>venv\\Scripts\\activate</code></p><p>macOS / Linux:<code class='language-'>source venv/bin/activate</code></p><p><ol start='5'><li><strong>Install Flask</strong></li></ol></p><p><ul><li>With the virtual environment active, use pip to install Flask. This command downloads and installs Flask and its required dependencies (Werkzeug, Jinja, etc.) into your isolated environment.\npip install Flask</li></ul></p><p><ol start='6'><li><strong>Verify the Installation</strong></li></ol></p><p>To confirm that Flask is installed, you can try importing it in a Python interpreter or by running a command.<code class='language-'>pip show Flask</code></p><p>This command will display information about the installed Flask package, confirming that the installation was successful.\nYou are now ready to start building your Flask application.\nFor a visual guide on the installation process, you can watch this Flask installation on Windows 11 guide. This video provides a step-by-step tutorial on setting up and running a Flask application on a Windows 11 system.</p></article></section>",
"authors": 1,
"draft": false,
"next":{
"nexttitle":"Set up flask development server",
"nextlink":"flask/flask_dev_server"
},
"prev":{
"prevtitle":"",
"prevlink":""
},
"datecreated":"2021-05-12",
"dateupdated":"2021-05-12"
},
{
"id": 2,
"title":"Set up flask development server",
"tag":"flask/flask_dev_server",
"slug":"cirofg",
"image":"flask.svg",
"video":"",
"thumbnail":"",
"summary":"A Flask server provides the essential tools for web development—like routing URLs to your Python code—without forcing a specific structure or including non-essential features.\nIt has a built-in development server that’s perfect for building and testing your app. For a live website, you’d run your Flask app with a more powerful, WSGI production-ready server.",
"post":"<section><article><p>A Flask server provides the essential tools for web development—like routing URLs to your Python code—without forcing a specific structure or including non-essential features.</p><p>It has a built-in development server that&rsquo;s perfect for building and testing your app. For a live website, you&rsquo;d run your Flask app with a more powerful, WSGI production-ready server.</p><p><h2 class='text-xl font-semibold' id='key-concepts'>Key Concepts</h2><ul><li>Micro Framework: Flask&rsquo;s core is small and extendable. It handles the basics and lets you choose libraries for other tasks (like database access), giving you maximum flexibility.</li><li>WSGI: It&rsquo;s built on the Web Server Gateway Interface (WSGI), the standard Python interface between web servers and web applications.</li><li>Development vs. Production Server: The server started with the flask run command is only for development. It&rsquo;s not secure or efficient enough to handle real user traffic. Production apps use robust WSGI servers like Gunicorn or uWSGI.</li></ul></p><h2 class='text-xl font-semibold' id='how-to-set-it-up'>How to Set It Up</h2><p>Here’s a step-by-step guide to creating a simple &ldquo;Home page&rdquo; Flask application.</p><ol><li>Set Up the Project and Virtual Environment</li></ol><p>First, make sure you have Python installed. It&rsquo;s a best practice to use a virtual environment to manage project dependencies separately.</p><p><h3 class='text-lg font-semibold' id='create-a-project-folder-and-navigate-into-it'>Create a project folder and navigate into it</h3><figure data-rehype-pretty-code-figure='sh'><figcaption data-rehype-pretty-code-title='sh' data-language='sh'>sh</figcaption><pre class='language-sh'><code class='language-sh' data-line><span data-line>mkdir flask_server</span>\n\n<span data-line>cd flask_server</span></code></pre></figure></p><h3 class='text-lg font-semibold' id='create-a-virtual-environment'>Create a virtual environment</h3><figure data-rehype-pretty-code-figure='sh'><figcaption data-rehype-pretty-code-title='sh' data-language='sh'>sh</figcaption><pre class='language-sh'><code class='language-sh' data-line>python -m venv venv\n</code></pre></figure><ul><li><p><strong>Activate the environment</strong>:</p><ul><li>macOS/Linux: <code class='language-'>source venv/bin/activate</code></li><li>Windows: <code class='language-'>.\\venv\\Scripts\\activate</code></li></ul><p>You&rsquo;ll see (venv) appear in your command prompt.</p></li></ul><ol start='2'><li>Install Flask</li></ol><p>With the virtual environment active, install Flask using pip.</p><figure data-rehype-pretty-code-figure='sh'><figcaption data-rehype-pretty-code-title='sh' data-language='sh'>sh</figcaption><pre class='language-sh'><code class='language-sh' data-line>pip install Flask\n</code></pre></figure><ol start='3'><li><strong>Create the Flask Application File</strong></li></ol><p>Create a Python file named <code>server.py</code> and add the following code:</p><h1 class='text-2xl font-bold' id='import-the-flask-class'>Import the Flask class</h1><p>from flask import Flask</p><figure data-rehype-pretty-code-figure='python'><figcaption data-rehype-pretty-code-title='python' data-language='python'>python</figcaption><pre class='language-python'><code class='language-python' data-line><span data-line># Create an instance of the app</span>\n<span data-line># __name__ tells Flask where to find resources</span>\n\n<span data-line>app = Flask(__name__)</span></code></pre></figure><h3 class='text-lg font-semibold'>Use the route() decorator to bind a URL to a function</h3><figure data-rehype-pretty-code-figure='python'><figcaption data-rehype-pretty-code-title='python' data-language='python'>python</figcaption><pre class='language-python'><code class='language-python' data-line><span data-line>@app.route('/')</span>\n<span data-line>def index():</span>\n<span data-line># The function returns the text to display in the browser</span>\n<span data-line>    return 'Home page'</span>\n</code></pre></figure>4. Run the Development Server\nIn your terminal, run the application using the flask command.<figure data-rehype-pretty-code-figure='sh'><figcaption data-rehype-pretty-code-title='sh' data-language='sh'>sh</figcaption><pre class='language-sh'><code class='language-sh' data-line>flask --app server run\n</code></pre></figure><p>You should see output indicating the server is running:</p><figure data-rehype-pretty-code-figure='sh'><pre class='language-sh'><code class='language-sh' data-line> * Serving Flask app 'app'\n * Running on http://127.0.0.1:5000\n  Press <kbd>CTRL+C</kbd> to quit\n</code></pre></figure><blockquote class='block-quote'><p class='block-quote-paragraph'><strong class='block-quote-strong'>TIP</strong></p><p>You can enable debug mode by run the with <code class='language-'>--debug</code> parameter</p><blockquote class='block-quote'><figure data-rehype-pretty-code-figure='sh'><figcaption data-rehype-pretty-code-title='sh' data-language='sh'>sh</figcaption><pre class='language-sh'><code class='language-sh' data-line>flask --app server run --debug</code></pre></figure></blockquote></blockquote><p>The final code looks like this in the end</p><figure data-rehype-pretty-code-figure='python'><figcaption data-rehype-pretty-code-title='python' data-language='python'>python</figcaption><pre class='language-python'><code class='language-python' data-line><span data-line>from flask import Flask</span>\n\n<span data-line>app = Flask(__name__)</span>\n\n<span data-line>app.route('/')</span>\n<span data-line>def index():</span>\n<span data-line>    return 'Home page'</span>\n</code></pre></figure><p>Now, open your web browser and go to <a class='text-blue-500 dark:text-amber-500' href='http://127.0.0.1:5000'>http://127.0.0.1:5000</a>. You&rsquo;ll see your &ldquo;Home page&rdquo; message. That&rsquo;s it! You&rsquo;ve successfully run a basic Flask server.</p></article></section>",
"authors":1,
"draft": false,
"next":{
"nexttitle":"Set up flask production server",
"nextlink":"flask/flask_prod_server"
},
"prev":{
"prevtitle":"Introduction to flask",
"prevlink":"flask"
},
"datecreated":"2021-06-05",
"dateupdated":"2021-06-05"
},
{"id": 3,
"title":"Set up flask production server",
"tag":"flask/flask_prod_server",
"slug":"dghsvg",
"image":"flask.svg",
"video":"",
"thumbnail":"",
"summary":"Setting up a Flask production server involves using a dedicated Web Server Gateway Interface (WSGI) server instead of the built-in development server. The built-in server is not designed to handle the scale, security, and performance requirements of a production environment.\n1. Choose a WSGI Server",
"post":"<p>Setting up a Flask production server involves using a dedicated Web Server Gateway Interface (WSGI) server instead of the built-in development server. The built-in server is not designed to handle the scale, security, and performance requirements of a production environment.</p><ol><li>Choose a WSGI Server\nA WSGI server is a piece of software that can run a Python application. It acts as an intermediary between your web server (like Nginx) and your Flask application. Popular choices include:</li></ol><ul><li>Gunicorn: A widely used, easy-to-configure, and highly performant WSGI server for UNIX-like systems. It's often the top choice for its simplicity and reliability.</li><li>Waitress: A pure-Python WSGI server that's great for Windows environments where Gunicorn isn't natively supported. It's also simple to set up.</li><li>uWSGI: A very powerful and feature-rich WSGI server that is highly configurable but can have a steeper learning curve.</li></ul><ol start='2'><li>Prepare Your Flask Application\nEnsure your Flask application is ready for production.</li></ol><ul><li>Disable Debug Mode: Set app.run(debug=False). Keeping debug mode on in production is a major security risk as it can expose sensitive information and allow arbitrary code execution.</li><li>Use an <strong>init</strong>.py or wsgi.py file: Create a simple file that holds your Flask application instance. This is the file your WSGI server will reference.\n<h1>wsgi.py</h1></li></ul><p>from my_app import create_app</p><h1>Create the Flask application instance</h1><p>app = create_app()</p><ol start='3'><li>Deploy with Gunicorn &#x26; Nginx\nThis is a common and robust production setup for Linux.\nStep 1: Install Gunicorn\nInstall Gunicorn in your project's virtual environment.\n<code class='language-bash'>pip install gunicorn</code></li></ol><p>Step 2: Test Your Application with Gunicorn\nRun Gunicorn from the command line to make sure it can serve your application.\n<code class='language-bash'>gunicorn --bind 0.0.0.0:5000 wsgi:app</code></p><ul>\n<li><code class= 'language-bash'>--bind 0.0.0.0:5000</code> tells Gunicorn to listen on port 5000 from any IP address.\n</li><li><code class= 'language-bash'>wsgi:app</code> specifies the module (wsgi.py) and the application instance (app) to run.\nStep 3: Configure a System Service (systemd)\nTo ensure your application automatically starts on boot and restarts if it crashes, create a systemd service file.\n</li><li>Create the file: sudo nano /etc/systemd/system/my_app.service\n</li><li>Add the following configuration, adjusting paths and names as needed:\n[Unit]\n<figure data-rehype-pretty-code-figure='sh'><figcaption data-rehype-pretty-code-title='sh' data-language='sh'>sh</figcaption><pre class='language-sh'><code class='language-sh' data-line>\n<span data-line>Description=Gunicorn instance to serve my_app</span>\n<span data-line>After=network.target</span></code></pre></figure></li></ul><p>[Service]\n<figure data-rehype-pretty-code-figure='sh'><figcaption data-rehype-pretty-code-title='sh' data-language='sh'>sh</figcaption><pre class='language-sh'><code class='language-sh' data-line><span data-line>User=your_username</span>\n<span data-line>Group=www-data</span>\n<span data-line>WorkingDirectory=\/path\/to\/your\/project</span>\n<span data-line>ExecStart=\/path\/to\/your\/venv\/bin\/gunicorn --workers 3 --bind unix:my_app.sock -m 007 wsgi:app</span></code></pre></figure></p><p>[Install]\n<figure data-rehype-pretty-code-figure='sh'><figcaption data-rehype-pretty-code-title='sh' data-language='sh'>sh</figcaption><pre class='language-sh'><code class='language-sh' data-line>WantedBy=multi-user.target</code></pre></figure></p><ul><li>Enable and start the service:\n<figure data-rehype-pretty-code-figure='sh'><figcaption data-rehype-pretty-code-title='sh' data-language='sh'>sh</figcaption><pre class='language-sh'><code class='language-sh' data-line><span data-line>sudo systemctl daemon-reload</span>\n<span data-line>sudo systemctl start my_app</span>\n<span data-line>sudo systemctl enable my_app</span></code></pre></figure></li></ul><p>Step 4: Configure Nginx as a Reverse Proxy\nNginx will handle incoming requests, serve static files, and forward dynamic requests to your Gunicorn server via the Unix socket (<code class='language-bash'>my_app.sock</code>).</p><ul><li><p>Create a new Nginx configuration file: <code class='language-bash'>sudo nano /etc/nginx/sites-available/my_app</code></p></li><li><p>Add the following configuration:\n<figure data-rehype-pretty-code-figure='sh'><figcaption data-rehype-pretty-code-title='sh' data-language='sh'>sh</figcaption><pre class='language-sh'><code class='language-sh' data-line><span data-line>server {</span>\n<span data-line>listen 80;</span>\n<span data-line>server_name your_domain.com www.your_domain.com;</span>\n<span data-line>location \/ {</span>\n<span data-line>include proxy_params;</span>\n<span data-line>proxy_pass <a href=\"http:\/\/unix:\/path\/to\/your\/project\/my_app.sock\">http:\/\/unix:\/path\/to\/your\/project\/my_app.sock</a>;</span>\n<span data-line>}</span>\n<span data-line>}</span></code></pre></figure></p>\n<h1>Optional: serve static files directly through Nginx</h1>\n<p><figure data-rehype-pretty-code-figure='sh'><figcaption data-rehype-pretty-code-title='sh' data-language='sh'>sh</figcaption><pre class='language-sh'><code class='language-sh' data-line><span data-line>location /static {</span>\n<span data-line>alias /path/to/your/project/my_app/static;\n</span><span data-line>}</span></code></pre></figure></p></li><li><p>Create a symbolic link to enable the site:\n<figure data-rehype-pretty-code-figure='sh'><figcaption data-rehype-pretty-code-title='sh' data-language='sh'>sh</figcaption><pre class='language-sh'><code class='language-sh' data-line><span data-line>sudo ln -s /etc/nginx/sites-available/my_app /etc/nginx/sites-enabled</span>\n<span data-line>sudo nginx -t</span>\n<span data-line>sudo systemctl restart nginx</span></code></pre></figure></p></li></ul><ol start='4'><li>Other Production Considerations</li></ol><ul><li>Environment Variables: Use environment variables for sensitive data like database credentials (<code class='language-bash'>os.environ.get('DATABASE_URL')</code>) instead of hardcoding them.</li><li>Static Files: For efficiency, it's best to configure Nginx or another web server to serve static files (CSS, JS, images) directly, bypassing the Flask application entirely.</li><li>Security: Use HTTPS (SSL/TLS) for all traffic. Let's Encrypt provides free SSL certificates.</li><li>Monitoring &#x26; Logging: Set up a logging system to monitor errors and application performance.</li></ul>",
"authors":1,
"draft": false,
"next":{
"nexttitle":"",
"nextlink":""
},
"prev":{
"prevtitle":"Setup flask development server",
"prevlink":"flask/flask_dev_server"
},
"datecreated":"2022-07-06",
"dateupdated":"2022-07-06"
}
]